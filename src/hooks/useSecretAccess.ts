import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';

// Hook pour dÃ©tecter une sÃ©quence de touches secrÃ¨te
export const useSecretAccess = () => {
  const [keySequence, setKeySequence] = useState<string[]>([]);
  const navigate = useNavigate();
  
  // SÃ©quence secrÃ¨te : Ctrl + Shift + A + D + M + I + N
  const SECRET_SEQUENCE = ['Control', 'Shift', 'KeyA', 'KeyD', 'KeyM', 'KeyI', 'KeyN'];
  const SEQUENCE_TIMEOUT = 5000; // 5 secondes pour complÃ©ter la sÃ©quence

  useEffect(() => {
    let timeoutId: NodeJS.Timeout;

    const handleKeyDown = (event: KeyboardEvent) => {
      // Ã‰viter les actions sur les champs de saisie
      const target = event.target as HTMLElement;
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
        return;
      }

      const key = event.code || event.key;
      
      // Ajouter la touche Ã  la sÃ©quence
      setKeySequence(prev => {
        const newSequence = [...prev, key];
        
        // VÃ©rifier si on a la sÃ©quence complÃ¨te
        if (newSequence.length >= SECRET_SEQUENCE.length) {
          const lastKeys = newSequence.slice(-SECRET_SEQUENCE.length);
          
          // VÃ©rifier si la sÃ©quence correspond
          const isCorrectSequence = SECRET_SEQUENCE.every((secretKey, index) => 
            lastKeys[index] === secretKey
          );
          
          if (isCorrectSequence) {
            console.log('ðŸ”“ SÃ©quence secrÃ¨te dÃ©tectÃ©e !');
            navigate('/secret-admin-access-hag2025');
            return [];
          }
        }
        
        // Limiter la longueur de la sÃ©quence
        return newSequence.slice(-10);
      });

      // RÃ©initialiser la sÃ©quence aprÃ¨s un dÃ©lai
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
        setKeySequence([]);
      }, SEQUENCE_TIMEOUT);
    };

    window.addEventListener('keydown', handleKeyDown);
    
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      clearTimeout(timeoutId);
    };
  }, [navigate]);

  return { keySequence: keySequence.slice(-SECRET_SEQUENCE.length) };
};

export default useSecretAccess;
